diff --git a/packages/plugin-ext/src/main/browser/workspace-main.ts b/packages/plugin-ext/src/main/browser/workspace-main.ts
index 6fab0f54..0f81cc16 100644
--- a/packages/plugin-ext/src/main/browser/workspace-main.ts
+++ b/packages/plugin-ext/src/main/browser/workspace-main.ts
@@ -30,6 +30,7 @@ import { Emitter, Event, Disposable, ResourceResolver } from '@theia/core';
 import { FileWatcherSubscriberOptions } from '../../api/model';
 import { InPluginFileSystemWatcherManager } from './in-plugin-filesystem-watcher-manager';
 import { StoragePathService } from './storage-path-service';
+import { WorkspaceService } from '@theia/workspace/lib/browser';

 export class WorkspaceMainImpl implements WorkspaceMain {

@@ -45,28 +46,37 @@ export class WorkspaceMainImpl implements WorkspaceMain {

     private resourceResolver: TextContentResourceResolver;

+    private workspaceService: WorkspaceService;
+
+    private storagePathService: StoragePathService;
+
     constructor(rpc: RPCProtocol, container: interfaces.Container) {
         this.proxy = rpc.getProxy(MAIN_RPC_CONTEXT.WORKSPACE_EXT);
         this.quickOpenService = container.get(MonacoQuickOpenService);
         this.fileSearchService = container.get(FileSearchService);
         this.resourceResolver = container.get(TextContentResourceResolver);
-        const storagePathService = container.get(StoragePathService);
+        this.workspaceService = container.get(WorkspaceService);
+        this.storagePathService = container.get(StoragePathService);

         this.inPluginFileSystemWatcherManager = new InPluginFileSystemWatcherManager(this.proxy, container);

-        // Plugin Context `storagePath` should be already updated when API event `onDidChangeWorkspaceFolders` fires.
-        // This is why `StoragePathService.onWorkspaceChanged` is used instead of `WorkspaceService.onWorkspaceChanged`.
-        storagePathService.onWorkspaceChanged(roots => {
-            this.notifyWorkspaceFoldersChanged(roots);
+        this.workspaceService.roots.then(roots => {
+            this.processWorkspaceFoldersChanged(roots);
+        });
+
+        this.workspaceService.onWorkspaceChanged(roots => {
+            this.processWorkspaceFoldersChanged(roots);
         });
     }

-    notifyWorkspaceFoldersChanged(roots: FileStat[]): void {
+    async processWorkspaceFoldersChanged(roots: FileStat[]): Promise<void> {
         if (this.isAnyRootChanged(roots) === false) {
             return;
         }

         this.roots = roots;
+        await this.storagePathService.updateStoragePath(roots);
+
         this.proxy.$onWorkspaceFoldersChanged({ roots });
     }

